package Formularios;

/**
 *
 * @author Dalton Cornejo
 * @author Gabriel Abreu
 * @author Angel Loayza
 * @date 10/02/2024
 * @version 1.0
 */
import javax.swing.*;
import tadPila.*;
import java.awt.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @param <T>
 */
public class Pilas<T> extends javax.swing.JFrame {

    private final Pila<JLabel> pilaImagenes = new TadPila<>();
    private final Pila<T> pilaDatos = new TadPila<>();

    int ancho = 1000;
    int cont = 0;

    /**
     * Creates new form Principal
     */
    public Pilas() {
        initComponents();
        setLocationRelativeTo(this);
        setTitle("Simulador de pilas");

        pilaPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));  // Alinea los elementos de la pila horizontalmente
        pilaPanel.setPreferredSize(new Dimension(1000, 180));

        jTextArea1.setText("Información:");
        jPanel1.setPreferredSize(jScrollPane1.getSize());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButtonApilar = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonDecapitar = new javax.swing.JButton();
        jButtonCima = new javax.swing.JButton();
        jButtonVacia = new javax.swing.JButton();
        jButtonInformacion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pilaPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButtonDesapilar1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("Pilas"); // NOI18N

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jButtonApilar.setText("Apilar");
        jButtonApilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApilarActionPerformed(evt);
            }
        });

        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        jButtonDecapitar.setText("Decapitar");
        jButtonDecapitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecapitarActionPerformed(evt);
            }
        });

        jButtonCima.setText("Cima");
        jButtonCima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCimaActionPerformed(evt);
            }
        });

        jButtonVacia.setText("¿Vacía?");
        jButtonVacia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVaciaActionPerformed(evt);
            }
        });

        jButtonInformacion.setText("Más información");
        jButtonInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInformacionActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setHorizontalScrollBar(null);

        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setFocusable(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane3.setBorder(null);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setAlignmentX(0.1F);
        jScrollPane3.setAutoscrolls(true);

        pilaPanel.setPreferredSize(new java.awt.Dimension(100, 330));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/p_Pila null.png"))); // NOI18N
        jLabel6.setAutoscrolls(true);
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pilaPanelLayout = new javax.swing.GroupLayout(pilaPanel);
        pilaPanel.setLayout(pilaPanelLayout);
        pilaPanelLayout.setHorizontalGroup(
            pilaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pilaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1178, Short.MAX_VALUE))
        );
        pilaPanelLayout.setVerticalGroup(
            pilaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pilaPanelLayout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 326, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(pilaPanel);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 39, 1370, 520));

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 18)); // NOI18N
        jLabel1.setText("Pila");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        jScrollPane2.setViewportView(jPanel1);

        jButtonDesapilar1.setText("Desapilar");
        jButtonDesapilar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesapilar1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Información:\n\nIngrese un primer dato para la pila.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1374, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonApilar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonDesapilar1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDecapitar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCima, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVacia, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonApilar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDesapilar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDecapitar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCima, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVacia, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVaciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVaciaActionPerformed
        jTextArea1.setText(jTextArea1.getText() + ((pilaDatos.pilaVacia()) ? "\nLa Pila está Vacía " : "\nLa Pila no está Vacía "));
    }//GEN-LAST:event_jButtonVaciaActionPerformed

    private void jButtonInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInformacionActionPerformed
        pilaDatos.imprimirPila();
        try {
            MasInformacion();
        } catch (PilaVacia ex) {
            Logger.getLogger(Pilas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonInformacionActionPerformed

    /**
     * Botón que apila los datos Si JTextField1 está vacío lanza una advertencia
     * Si no está vacío lanza otro if Si la pila está vacía entonces cambia la
     * imagen de pila con referencía a tierra por pila con referencia a datos.
     *
     * @param evt
     */
    private void jButtonApilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApilarActionPerformed

        String textoIngresado = jTextField1.getText();
        if (textoIngresado.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese un dato para apilar");
        } else {
            if (pilaImagenes.pilaVacia()) {
                String imagePath = obtenerRutaDeImagen2();
                jLabel6.setIcon(new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
            }
            pilaImagenes.imprimirPila();
            apilar();
        }
    }//GEN-LAST:event_jButtonApilarActionPerformed

    /**
     * Botón para decapilar datos de la pila Lanza un try-catch que verifica que
     * no decapite si la pila está vacía, luego lanza otro if que verifica que
     * si la pila está vacía entonces cambia la imagen de la pila con referencia
     * a los datos a la imagen de la pila con refenecia a tierra
     *
     * @param evt
     */
    private void jButtonCimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCimaActionPerformed
        if (pilaDatos.pilaVacia()) {
            jTextArea1.setText(jTextArea1.getText() + "\nNo hay cima la pila esta vacia ");
        } else {
            try {
                jTextArea1.setText(jTextArea1.getText() + "\nLa cima de la pila es: " + pilaDatos.cima());
            } catch (PilaVacia ex) {
                Logger.getLogger(Pilas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonCimaActionPerformed
    
     /**
     * Botón para limpiar los datos de la pila Lanza un try-catch que verifica que
     * no limpie si la pila está vacía
     * 
     * @param evt
     */
    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        try {
            limpiar();
        } catch (PilaVacia ex) {
        }
        if (pilaImagenes.pilaVacia()) {
            String imagePath = obtenerRutaDeImagen3();
            jLabel6.setIcon(new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
        }
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    /**
     * Botón para desapilar datos de la pila Lanza un try-catch que verifica que
     * no desapile si la pila está vacía, luego lanza otro if que verifica que
     * si la pila está vacía entonces cambia la imagen de la pila con referencia
     * a los datos a la imagen de la pila con refenecia a tierra
     *
     * @param evt
     */
    private void jButtonDesapilar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDesapilar1ActionPerformed
        try {
            desapilar();
        } catch (PilaVacia ex) {
        }
        if (pilaImagenes.pilaVacia()) {
            String imagePath = obtenerRutaDeImagen3();
            jLabel6.setIcon(new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
        }
    }//GEN-LAST:event_jButtonDesapilar1ActionPerformed
    
     /**
     * Botón para decapitar datos de la pila Lanza un try-catch que verifica que
     * no decapite si la pila está vacía, luego lanza otro if que verifica que
     * si la pila está vacía entonces cambia la imagen de la pila con referencia
     * a los datos a la imagen de la pila con refenecia a tierra
     *
     * @param evt
     */
    private void jButtonDecapitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecapitarActionPerformed
        try {
            decapitar();
        } catch (PilaVacia ex) {
        }
        if (pilaImagenes.pilaVacia()) {
            String imagePath = obtenerRutaDeImagen3();
            jLabel6.setIcon(new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
        }
    }//GEN-LAST:event_jButtonDecapitarActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        if (jTextField1.getText().length() >= 8) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    /**
     * Metodo que apila un dato en la pila
     *
     * @return void
     */
    private void apilar() {
        cont++;
        String dato = jTextField1.getText();
        String imagePath = obtenerRutaDeImagen();

        if (!dato.isEmpty() && !imagePath.isEmpty()) {
            ImagenLabel nuevoLabel = new ImagenLabel(dato, imagePath);

            pilaImagenes.apilar(nuevoLabel);
            System.out.println("Elemento apilado: " + dato);
            jTextArea1.setText(jTextArea1.getText() + "\nElemento apilado: " + dato);

            if (cont >= 4) {
                ancho = ancho + 155;
                pilaPanel.setPreferredSize(new Dimension(ancho, 440));
            }

        } else {
            jTextArea1.setText(jTextArea1.getText() + "\nNo se ha podido apilar: Dato vacio ");
        }
        actualizarPila();

        pilaDatos.apilar((T) dato);
        pilaDatos.imprimirPila();

    }

    /**
     * Metodo que desapila un dato en la pila
     *
     * @throws PilaVacia
     * @return void
     */
    private void desapilar() throws PilaVacia {

        if (!pilaImagenes.pilaVacia()) {
            JLabel desapilado = pilaImagenes.desapilar();
            pilaPanel.remove(desapilado);
            System.out.println("Elemento desapilado: " + desapilado.getText());
            jTextArea1.setText(jTextArea1.getText() + "\nElemento desapilado: " + desapilado.getText());
            actualizarPila();

            if (cont >= 6) {
                ancho = ancho - 155;
                pilaPanel.setPreferredSize(new Dimension(ancho, 440));
            }

        } else {
            System.out.println("La pila está vacía.");
            jTextArea1.setText(jTextArea1.getText() + "\nNo se puede desapilar: Pila esta vacia");
            actualizarPila();
        }
        pilaDatos.desapilar();
    }

    /**
     * Metodo que decapita un dato en la pila
     *
     * @throws PilaVacia
     * @return void
     */
    private void decapitar() throws PilaVacia {
        if (!pilaImagenes.pilaVacia()) {
            JLabel decapitado = pilaImagenes.cima();
            pilaImagenes.decapitar();
            pilaPanel.remove(decapitado);
            System.out.println("Elemento decapitado ");
            jTextArea1.setText(jTextArea1.getText() + "\nPila decapitada: ");
            actualizarPila();
            if (cont >= 6) {
                ancho = ancho - 250;
                pilaPanel.setPreferredSize(new Dimension(ancho, 440));
            }
        } else {
            System.out.println("La pila está vacía.");
            jTextArea1.setText(jTextArea1.getText() + "\nNo se puede decapitar: Pila esta vacia");
            actualizarPila();
        }
        pilaDatos.decapitar();
    }

    /**
     * Metodo que limpia la pila
     *
     * @throws PilaVacia
     * @return void
     */
    private void limpiar() throws PilaVacia {
        if (!pilaImagenes.pilaVacia()) {
            pilaImagenes.eliminarPila();
            for (Component component : pilaPanel.getComponents()) {
                if (component instanceof JLabel) {
                    System.out.println(((JLabel) component).getClass().toString());
                    if (((JLabel) component).getClass().toString().compareTo("class Formularios.Pilas$ImagenLabel") == 0) {
                        pilaPanel.remove(component);
                    }
                }
            }
            //pilaPanel.removeAll();
            jTextArea1.setText(jTextArea1.getText() + "\nPila limpiada: ");
            actualizarPila();
        } else {
            System.out.println("La pila ya está vacía.");
            jTextArea1.setText(jTextArea1.getText() + "\nLa Pila ya esta vacia");
            actualizarPila();
        }
        pilaDatos.eliminarPila();
    }

    /**
     * Metodo que informa la pila
     *
     * @throws PilaVacia
     * @return void
     */
    public void MasInformacion() throws PilaVacia {
        T dato = null;
        if (!pilaDatos.pilaVacia()) {
            jTextArea1.setText(jTextArea1.getText() + "\nEstado de la pila: ");
            MasInformacionR(dato);
        } else {
            jTextArea1.setText(jTextArea1.getText() + "\nLa Pila esta Vacia");
        }
    }

    private void MasInformacionR(T dato) throws PilaVacia {
        if (!pilaDatos.pilaVacia()) {
            dato = pilaDatos.desapilar();
            jTextArea1.setText(jTextArea1.getText() + dato);
            MasInformacionR(dato);
            pilaDatos.apilar(dato);
        }
        pilaDatos.imprimirPila();
    }

    /**
     * Metodo que ajusta la imagen que se va a apilar junto con el texto
     *
     * @return String
     * @extends JLabel
     */
    private final class ImagenLabel extends JLabel {

        private final String imagePath;
        private final String text;

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawString(this.text, 10, 118); //these are x and y positions
        }

        public ImagenLabel(String texto, String imagePath) {
            this.imagePath = imagePath;
            this.text = texto;

            // Escala la imagen y establece el icono


            // Configuración para el ícono y la posición de la imagen
            setIcon(new ImageIcon(obtenerRutaDeImagenLabel()));

            Font fuente = new Font("Calibri", Font.BOLD, 20);
            setFont(fuente);
            setForeground(Color.BLACK);
            setOpaque(false);
        }

        public String obtenerRutaDeImagenLabel() {
            return imagePath;
        }
    }

    /**
     * Metodo que actualiza la pila visualmente durante la ejecución
     *
     * @return void
     */
    private void actualizarPila() {

        Pila<JLabel> pilaTemporal = new TadPila<>(); // Pila temporal para mostrar elementos en pilaPanel

        // Desapilar los elementos y agregarlos al pilaPanel y la pila temporal
        while (!pilaImagenes.pilaVacia()) {
            try {
                JLabel label = pilaImagenes.desapilar();

                // Añadir el elemento desapilado al pilaPanel y la pila temporal
                pilaPanel.add(label);
                pilaTemporal.apilar(label);

            } catch (PilaVacia e) {
            }
        }

        // Volver a apilar los elementos en la pilaLabels
        while (!pilaTemporal.pilaVacia()) {
            try {
                JLabel label = pilaTemporal.desapilar();
                pilaImagenes.apilar(label);

            } catch (PilaVacia e) {
            }
        }

        // Revalidar y repintar el pilaPanel
        pilaPanel.revalidate();
        pilaPanel.repaint();
    }

    /**
     * Obtencion de ruta de imagenes si la pila está vacía entonces añade la
     * imagen del dato con referencia a tierra Si la pila no está vacía entonces
     * se añade el dato con referencia al siguiente
     *
     * @return String
     */
    private String obtenerRutaDeImagen() {

        String imagePath;
        if (!pilaImagenes.pilaVacia()) {
            // Se obtiene la ruta de la imagen Dato con su referencia al siguiente
            imagePath = "C:\\Users\\Dalton\\OneDrive\\Documentos\\NetBeansProjects\\ED2023_Proyecto_Pilas\\src\\Imagenes\\p_DatoyRef.png";
            return imagePath;
        } else {
            // Se obtiene la ruta de la imagen Dato con referencia a tierra
            imagePath = "C:\\Users\\Dalton\\OneDrive\\Documentos\\NetBeansProjects\\ED2023_Proyecto_Pilas\\src\\Imagenes\\p_FondoPila.png";
            return imagePath;
        }
    }

    /**
     * Obtencion de ruta de imagen de la Pila con referencia a los datos
     * insertados
     *
     * @return String
     */
    private String obtenerRutaDeImagen2() {
        // Se obtiene la ruta de la imagen de Pila con referencia a los datos insertados
        return "C:\\Users\\Dalton\\OneDrive\\Documentos\\NetBeansProjects\\ED2023_Proyecto_Pilas\\src\\Imagenes\\p_Pila datos.png";
    }

    private String obtenerRutaDeImagen3() {
        // Se obtiene la ruta de la imagen de Pila con referencia a tierra
        return "C:\\Users\\Dalton\\OneDrive\\Documentos\\NetBeansProjects\\ED2023_Proyecto_Pilas\\src\\Imagenes\\p_Pila null.png";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (!"Nimbus".equals(info.getName())) {
                } else {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Pilas().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApilar;
    private javax.swing.JButton jButtonCima;
    private javax.swing.JButton jButtonDecapitar;
    private javax.swing.JButton jButtonDesapilar1;
    private javax.swing.JButton jButtonInformacion;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonVacia;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel6;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel pilaPanel;
    // End of variables declaration//GEN-END:variables
}
